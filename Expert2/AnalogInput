-- 08.08.2019 09:08:05 AR V1.0a

block.setSize(151, 151)

generic = {
  name = 'Analog inputs',
  parameter = {
    modes = {0, 0, 0, 0, 0, 0, 0, 0}
  },

  init = function(self)
    block.needPPVersion(2, 2, 'c')
    block.setInputsPinCount(0)
    block.setOutputsPinCount(8)
    for i = 1, 8 do
      block.setOutputPinTypeRestrains(i, 'boolean')
      block.setOutputPinName(i, 'AI' .. i)
    end
    block.modifyFlags('SupressStartFunctionCall', true)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', self.name, [[
]])
    for i = 1, 8 do
      local type = i <= 4 and '0 - 10V' or '0 - 2.5V'
      if i == 1 then
        type = type .. '\nph (L)'
      end
      gui.add('ComboBox', 'ComboBoxModes' .. i, 'Modes', type)
      gui.set('ComboBoxModes' .. i, 'ItemIndex', self.parameter.modes[i])
    end
    gui.setSize()
  end,


  apply = function(self)
    for i = 1, 8 do
      self.parameter.modes[i] = gui.get('ComboBoxModes' .. i, 'ItemIndex')
    end
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar{
      Type = 0x02,
      CenterDrawSource = [[
        draw.setColorA(1, 1, 1)
        draw.text(0, 0, w, h, "]] .. self.name .. [[", 4)
      ]],
      FillColorSource = '0.04, 0.3, 0.56',
      PinNameColorSource = '1, 1, 1',
    }
  end,

  generate = function(self, remote)
    if not remote then
      return false
    end
    local _, _, group = remote:find('(%w*)')
    if group ~= 'ESP32' then
      return false
    end

    local source =
      [==[
        local block = {}

        block.step = function()
          local q = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
          local b = block.parent.i2cBus
          assert(b, 'Missing I2C Bus block')
          try (
            function()
              if not block.init then
                print('ADC Init')
                block.init = true
                b:start()
                b:address(0x21, false)
                b:write(2) -- Configuration
                b:start()
                b:address(0x21, false)
                b:write(0xF0, 0x0F) -- All 8 channels enabled
                b:stop()
              end
              for i = 1, 8 do
                b:start()
                b:address(0x21, false)
                b:write(0x80 | ((i - 1) << 4))
                b:stop()
                tmr.delayus(3)
                b:start()
                b:address(0x21, true)
                local v = (b:read() << 8) | b:read()
                b:stop()
                local j = ((v >> 12) & 0x07) + 1
                q[j] = (v & 0x0FFF) / 4095.0;
              end
            end,
            function(where, line, error, message)
              print(block, false, message)
            end,
            function()
            end
          )
          return q[1] * 10.0, q[2] * 10.0, q[3] * 10.0, q[4] * 10.0, q[5] * 2.5, q[6] * 2.5, q[7] * 2.5, q[8] * 2.5
        end

        return block
      ]==]
    return source, block.codeInfo('TargetSpecial', 'Lua53')
  end,

}


