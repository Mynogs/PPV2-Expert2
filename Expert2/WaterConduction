-- 08.08.2019 09:08:05 AR V1.0a

block.setSize(151, 51)

generic = {
  name = 'Water conduction',
  parameter = {
  },

  init = function(self)
    block.needPPVersion(2, 2, 'c')
    block.setInputsPinCount(0)
    block.setOutputsPinCount(2)
    for i = 1, 2 do
      block.setOutputPinName(i, 'F' .. i)
    end
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', self.name, [[
Measures the water conductivity as a frequency.
The higher the conductivity, the higher the frequency.
A conductivity of 0.1µS (10MOhm) gives a frequency of 1.06Hz,
1000µS (1kOhm) gives a frequency of 8829Hz.
]])
    gui.setSize()
  end,


  apply = function(self)
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar{
      Type = 0x02,
      CenterDrawSource = [[
        draw.setColorA(1, 1, 1)
        draw.text(0, 0, w, h, "]] .. self.name .. [[", 4)
      ]],
      FillColorSource = '0.04, 0.3, 0.56',
      PinNameColorSource = '1, 1, 1',
    }
  end,

  generate = function(self, remote)
    if not remote then
      return false
    end
    local _, _, group = remote:find('(%w*)')
    if group ~= 'ESP32' then
      return false
    end

    local source =
      [==[
        local block = {}

        block.start = function()
          block.d = i2c.attach(i2c.I2C0, i2c.MASTER, 1000000) --400000)
        end

        block.step = function()
          local q = {0.0, 0.0}
          for i = 1, 2 do
            try (
              function()
                block.d:start()
                block.d:address(0x08, false)
                block.d:write(i)
                block.d:start()
                block.d:address(0x08, true)
                local ll, lh, hl, hh = block.d:read(), block.d:read(), block.d:read(), block.d:read()
                block.d:stop()
                q[i] = ll | (lh << 8) | (hl << 16) | (hh << 24)
              end,
              function(where, line, error, message)
                --sim.assert(block, false, message)
              end,
              function()
              end
            )
          end
          return q[1] / 1000.0, q[2] / 1000.0
        end

        return block
      ]==]
    return source, block.codeInfo('TargetSpecial', 'Lua53')
  end,

}


